!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.FractionalDelay=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var FractionalDelay = function FractionalDelay(sampleRate, optMaxDelayTime) {
  this.delayTime = 0;
  this.maxDelayTime = 1;
  this.posRead = 0;
  this.posWrite = 0;
  this.fracXi1 = 0;
  this.fracYi1 = 0;
  this.intDelay = 0;
  this.fracDelay = 0;
  this.buffer = undefined;
  this.bufferSize = undefined;
  this.a1 = undefined;
  this.sampleRate = sampleRate;
  this.maxDelayTime = optMaxDelayTime || this.maxDelayTime;
  this.bufferSize = this.maxDelayTime * this.sampleRate;
  if (this.bufferSize % 1 !== 0) {
    this.bufferSize = parseInt(this.bufferSize) + 1;
  }
  this.buffer = new Float32Array(this.bufferSize);
  return this;
};
($traceurRuntime.createClass)(FractionalDelay, {
  setDelay: function(delayTime) {
    if (delayTime < this.maxDelayTime) {
      this.delayTime = delayTime;
      var samplesDelay = delayTime * this.sampleRate;
      this.intDelay = parseInt(samplesDelay);
      this.fracDelay = samplesDelay - this.intDelay;
      this.resample();
      if (this.fracDelay !== 0) {
        this.updateThiranCoefficient();
      }
    } else {
      console.log("throw error...how?");
    }
  },
  getDelay: function() {
    return this.delayTime;
  },
  process: function(inputBuffer) {
    var outputBuffer = new Float32Array(inputBuffer.length);
    for (var i = 0; i < inputBuffer.length; i = i + 1) {
      this.buffer[this.posWrite] = inputBuffer[i];
      outputBuffer[i] = this.buffer[this.posRead];
      this.updatePointers();
    }
    if (this.fracDelay === 0) {
      return outputBuffer;
    } else {
      outputBuffer = new Float32Array(this.fractionalThiranProcess(outputBuffer));
      return outputBuffer;
    }
  },
  updatePointers: function() {
    if (this.posWrite === (this.buffer.length - 1)) {
      this.posWrite = 0;
    } else {
      this.posWrite = this.posWrite + 1;
    }
    if (this.posRead === (this.buffer.length - 1)) {
      this.posRead = 0;
    } else {
      this.posRead = this.posRead + 1;
    }
  },
  updateThiranCoefficient: function() {
    this.a1 = (1 - this.fracDelay) / (1 + this.fracDelay);
  },
  resample: function() {
    if (this.posWrite - this.intDelay < 0) {
      var pos = this.intDelay - this.posWrite;
      this.posRead = this.buffer.length - pos;
    } else {
      this.posRead = this.posWrite - this.intDelay;
    }
  },
  fractionalThiranProcess: function(inputBuffer) {
    var outputBuffer = new Float32Array(inputBuffer.length);
    var x,
        y;
    var xi1 = this.fracXi1;
    var yi1 = this.fracYi1;
    for (var i = 0; i < inputBuffer.length; i = i + 1) {
      x = inputBuffer[i];
      y = this.a1 * x + xi1 - this.a1 * yi1;
      xi1 = x;
      yi1 = y;
      outputBuffer[i] = y;
    }
    this.fracXi1 = xi1;
    this.fracYi1 = yi1;
    return outputBuffer;
  }
}, {});
;
module.exports = FractionalDelay;


//# sourceURL=/Users/goldszmidt/sam/pro/dev/fractional-delay/fractional-delay.es6.js
},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;base64,
